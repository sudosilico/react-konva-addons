{"version":3,"file":"MultiTouchExample.stories.583cf870.js","sources":["../../src/events/useKonvaContainerEventListener.ts","../../src/nodes/MultiTouchExample.tsx"],"sourcesContent":["import Konva from \"konva\";\nimport { RefObject, useRef, useLayoutEffect, useEffect } from \"react\";\n\nexport function useKonvaContainerEventListener<K extends keyof HTMLElementEventMap>(\n  ref: RefObject<Konva.Node>,\n  eventName: K,\n  callback: (event: HTMLElementEventMap[K]) => void,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const eventListener: typeof callback = (event) => {\n      console.log(\"eventListener callback\");\n      savedCallback.current(event);\n    };\n\n    const node = ref.current;\n    if (!node) {\n      console.log(\"No node, returning.\");\n      return;\n    }\n\n    const stage = node.getStage();\n    if (!stage) {\n      console.log(\"No stage, returning.\");\n      return;\n    }\n\n    const container = stage.container();\n\n    console.log(\"Adding container listener: \" + eventName);\n    container.addEventListener(eventName, eventListener, options);\n\n    return () => {\n      console.log(\"Removing container listener: \" + eventName);\n      container.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, options, ref]);\n}\n","import Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/lib/Node\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { Circle, Group, Layer, Rect, Stage, Text } from \"react-konva\";\nimport {\n  BoundInnerDraggableRect,\n  DraggableRect,\n  FixedRect,\n} from \"../components/NewDraggableStage/NewDraggableStageTools\";\nimport { useKonvaContainerEventListener } from \"../events/useKonvaContainerEventListener\";\n\nexport type MultiTouchExampleProps = {\n  //\n};\n\nexport function MultiTouchExample(props: MultiTouchExampleProps) {\n  const stageRef = useRef<Konva.Stage>(null);\n  const [log, setLog] = useState<string[]>([]);\n\n  //   useEffect(() => {\n  //     const stage = stageRef.current;\n  //     if (!stage) return;\n  //   }, [stageRef]);\n\n  useKonvaContainerEventListener(stageRef, \"keydown\", (e) => {\n    console.log(e);\n    if (e.key === \"Shift\") {\n    }\n\n    e.preventDefault();\n  });\n\n  useKonvaContainerEventListener(stageRef, \"keyup\", (e) => {\n    console.log(e);\n    if (e.key === \"Shift\") {\n    }\n\n    e.preventDefault();\n  });\n\n  useLayoutEffect(() => {\n    const stage = stageRef.current;\n    if (!stage) return;\n\n    const container = stage.container();\n\n    // Make sure the stage container has a tab index so that we can\n    // focus it and it will pick up keyboard events.\n    if (typeof container.tabIndex == \"undefined\") {\n      container.tabIndex = 1;\n    }\n  }, []);\n\n  const logLine = (line: string) => {\n    const lastLineOfLog = log[log.length - 1];\n\n    setLog((prev) => [...prev, line]);\n  };\n\n  const clearLog = () => {\n    setLog([]);\n  };\n\n  const onTouchStart = (msg: string) => (e: Konva.KonvaEventObject<TouchEvent>) => {\n    logLine(\n      `ts: '${msg}': ${e.evt.touches.length}, t: ${e.target.name()}, ct: ${e.currentTarget.name()}`,\n    );\n  };\n\n  const onTouchEnd = (msg: string) => (e: Konva.KonvaEventObject<TouchEvent>) => {\n    logLine(\n      `te:'${msg}': ${e.evt.touches.length}, t: ${e.target.name()}, ct: ${e.currentTarget.name()}`,\n    );\n  };\n\n  const onTouchMove = (msg: string) => (e: Konva.KonvaEventObject<TouchEvent>) => {\n    logLine(\n      `tm: '${msg}': ${e.evt.touches.length}, t: ${e.target.name()}, ct: ${e.currentTarget.name()}`,\n    );\n  };\n\n  const onDragStart = (msg: string) => (e: Konva.KonvaEventObject<DragEvent>) => {\n    logLine(`ds: '${msg}': t: ${e.target.name()}, ct: ${e.currentTarget.name()}`);\n  };\n\n  const onDragEnd = (msg: string) => (e: Konva.KonvaEventObject<DragEvent>) => {\n    logLine(`de: '${msg}': t: ${e.target.name()}, ct: ${e.currentTarget.name()}`);\n  };\n\n  const onDragMove = (msg: string) => (e: Konva.KonvaEventObject<DragEvent>) => {\n    logLine(`dm: '${msg}': t: ${e.target.name()}, ct: ${e.currentTarget.name()}`);\n  };\n\n  const onClick = (msg: string) => (e: Konva.KonvaEventObject<MouseEvent>) => {\n    logLine(`c: '${msg}': t: ${e.target.name()}, ct: ${e.currentTarget.name()}`);\n  };\n\n  const width = 500;\n  const height = 500;\n\n  const bgroupRef = useRef<Konva.Group>(null);\n  const brectRef = useRef<Konva.Rect>(null);\n\n  return (\n    <>\n      <Stage\n        name=\"aStage\"\n        ref={stageRef}\n        width={width}\n        height={height}\n        onTouchStart={onTouchStart(\"stage\")}\n        onTouchEnd={onTouchEnd(\"stage\")}\n        onTouchMove={onTouchMove(\"stage\")}\n        onDragStart={onDragStart(\"stage\")}\n        onDragEnd={onDragEnd(\"stage\")}\n        onDragMove={onDragMove(\"stage\")}\n        onClick={onClick(\"stage\")}\n        draggable\n        // x={width / 2}\n        // y={height / 2}\n        // offset={{ x: width / 2, y: height / 2 }}\n      >\n        <Layer\n          name=\"aLayer\"\n          onTouchStart={onTouchStart(\"layer\")}\n          onTouchEnd={onTouchEnd(\"layer\")}\n          onTouchMove={onTouchMove(\"layer\")}\n          onDragStart={onDragStart(\"layer\")}\n          onDragEnd={onDragEnd(\"layer\")}\n          onDragMove={onDragMove(\"layer\")}\n          onClick={onClick(\"layer\")}\n        >\n          <Rect width={500} height={500} fill=\"cornflowerblue\" />\n          <FixedRect x={100} y={100} />\n          <DraggableRect x={180} y={150} />\n          <Group ref={bgroupRef}>\n            <Rect width={100} height={100} fill=\"green\" />\n            <Rect\n              ref={brectRef}\n              width={100}\n              height={15}\n              fill=\"black\"\n              opacity={0.2}\n              draggable\n              onDragStart={(e: KonvaEventObject<DragEvent>) => {\n                if (e.currentTarget === brectRef.current) {\n                  e.target.stopDrag();\n                  bgroupRef.current?.startDrag(e);\n                  e.cancelBubble = true;\n                }\n              }}\n            />\n            {/* <Text text=\"Bound Draggable\" fontSize={20} fill=\"green\" /> */}\n          </Group>\n          <Group\n            name=\"aGroup\"\n            onTouchStart={onTouchStart(\"group\")}\n            onTouchEnd={onTouchEnd(\"group\")}\n            onTouchMove={onTouchMove(\"group\")}\n            onDragStart={onDragStart(\"group\")}\n            onDragEnd={onDragEnd(\"group\")}\n            onDragMove={onDragMove(\"group\")}\n            onClick={onClick(\"group\")}\n          >\n            <Circle\n              name=\"Red1\"\n              radius={50}\n              x={150}\n              y={250}\n              fill=\"red\"\n              draggable\n              onTouchStart={onTouchStart(\"red1\")}\n              onTouchEnd={onTouchEnd(\"red1\")}\n              onTouchMove={onTouchMove(\"red1\")}\n              onDragStart={onDragStart(\"red1\")}\n              onDragEnd={onDragEnd(\"red1\")}\n              onDragMove={onDragMove(\"red1\")}\n              onClick={onClick(\"red1\")}\n            />\n            <Circle\n              name=\"Red2\"\n              radius={50}\n              x={350}\n              y={250}\n              fill=\"red\"\n              draggable\n              onTouchStart={onTouchStart(\"red2\")}\n              onTouchEnd={onTouchEnd(\"red2\")}\n              onTouchMove={onTouchMove(\"red2\")}\n              onDragStart={onDragStart(\"red2\")}\n              onDragEnd={onDragEnd(\"red2\")}\n              onDragMove={onDragMove(\"red2\")}\n              onClick={onClick(\"red2\")}\n            />\n          </Group>\n        </Layer>\n      </Stage>\n      <div style={{ height: height, overflowY: \"scroll\" }}>\n        <h2>Log:</h2>\n        <button onClick={clearLog}>Clear log</button>\n        {log.map((line, i) => (\n          <div key={i}>{line}</div>\n        ))}\n      </div>\n    </>\n  );\n}\n"],"names":["useRef","useLayoutEffect","useEffect","useState","useKonvaContainerEventListener","console","e","container","setLog","logLine","_jsxs","_Fragment","_jsx","stageRef","bgroupRef","brectRef","height","clearLog","line"],"mappings":"4OAIE,WAAA,EACA,EACA,EACA,EACA,CACM,KAAA,GAAgBA,iBAAO,CAAQ,EAErCC,EAAAA,QAAAA,gBAAgB,IAAM,CACpB,EAAc,QAAU,CAAA,EACvB,CAAC,CAAQ,CAAC,EAEbC,EAAAA,QAAAA,UAAU,IAAM,CACR,KAAA,GAAiC,AAAC,GAAU,CAChD,QAAQ,IAAI,wBAAwB,EACpC,EAAc,QAAQ,CAAK,CAAA,EAGvB,EAAO,EAAI,QACjB,GAAI,CAAC,EAAM,CACT,QAAQ,IAAI,qBAAqB,EACjC,MACF,CAEM,KAAA,GAAQ,EAAK,WACnB,GAAI,CAAC,EAAO,CACV,QAAQ,IAAI,sBAAsB,EAClC,MACF,CAEM,KAAA,GAAY,EAAM,YAEhB,eAAA,IAAI,8BAAgC,CAAS,EAC3C,EAAA,iBAAiB,EAAW,EAAe,CAAO,EAErD,IAAM,CACH,QAAA,IAAI,gCAAkC,CAAS,EAC7C,EAAA,oBAAoB,EAAW,CAAa,CAAA,CAEvD,EAAA,CAAC,EAAW,EAAS,CAAG,CAAC,CAC9B,CC5BO,WAAA,EAAA,CACL,KAAA,GAAAF,iBAAA,IAAA,EACA,CAAA,EAAA,GAAAG,EAAA,QAAA,SAAA,CAAA,CAAA,EAOAC,EAAAA,EAAAA,UAAAA,AAAAA,GAAAA,CACEC,QAAAA,IAAAA,CAAAA,EACA,EAAA,IAGAC,EAAAA,eAAAA,CAAA,CAAA,EAGFF,EAAAA,EAAAA,QAAAA,AAAAA,GAAAA,CACEC,QAAAA,IAAAA,CAAAA,EACA,EAAA,IAGAC,EAAAA,eAAAA,CAAA,CAAA,EAGFL,EAAAA,QAAAA,gBAAAA,IAAAA,CACE,KAAA,GAAA,EAAA,QACA,GAAA,CAAA,EAAY,OAEZ,KAAA,GAAA,EAAA,YAIA,AAAA,MAAA,GAAA,UAAA,aACEM,GAAAA,SAAAA,EACD,EAAA,CAAA,CAAA,EAGH,KAAA,GAAA,AAAA,GAAA,CACE,EAAA,EAAA,OAAA,GAEAC,EAAAA,AAAAA,GAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAM,EAGR,EAAA,IAAA,CACEA,EAAAA,CAAAA,CAAAA,CAAM,EAGR,EAAA,AAAA,GAAA,AAAA,GAAA,CACEC,EAAAA,QAAAA,OAAAA,EAAAA,IAAAA,QAAAA,cAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,QAAAA,CAAO,EAKT,EAAA,AAAA,GAAA,AAAA,GAAA,CACEA,EAAAA,OAAAA,OAAAA,EAAAA,IAAAA,QAAAA,cAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,QAAAA,CAAO,EAKT,EAAA,AAAA,GAAA,AAAA,GAAA,CACEA,EAAAA,QAAAA,OAAAA,EAAAA,IAAAA,QAAAA,cAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,QAAAA,CAAO,EAKT,EAAA,AAAA,GAAA,AAAA,GAAA,CACEA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,CAAO,EAGT,EAAA,AAAA,GAAA,AAAA,GAAA,CACEA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,CAAO,EAGT,EAAA,AAAA,GAAA,AAAA,GAAA,CACEA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,CAAO,EAGT,EAAA,AAAA,GAAA,AAAA,GAAA,CACEA,EAAAA,OAAAA,UAAAA,EAAAA,OAAAA,KAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,CAAO,EAGT,EAAA,IACA,EAAA,IAEA,EAAAT,iBAAA,IAAA,EACA,EAAAA,iBAAA,IAAA,EAEA,MAAAU,GAAAC,EAAA,CACE,SAAA,CAAAC,EAAA,EAAA,CACE,KAAA,SACO,IAAA,EACAC,QACL,SACA,aAAA,EAAA,OAAA,EAC0B,WAAA,EAAA,OAAA,EACJ,YAAA,EAAA,OAAA,EACE,YAAA,EAAA,OAAA,EACA,UAAA,EAAA,OAAA,EACJ,WAAA,EAAA,OAAA,EACE,QAAA,EAAA,OAAA,EACN,UAAA,iBAMhB,KAAA,SACO,aAAA,EAAA,OAAA,EACqB,WAAA,EAAA,OAAA,EACJ,YAAA,EAAA,OAAA,EACE,YAAA,EAAA,OAAA,EACA,UAAA,EAAA,OAAA,EACJ,WAAA,EAAA,OAAA,EACE,QAAA,EAAA,OAAA,EACN,SAAA,CAAAD,EAAA,EAAA,CAEhB,MAAA,IAAa,OAAA,IAAa,KAAA,gBAAU,CAAA,EAAAA,EAAA,EAAA,CACpC,EAAA,IAAc,EAAA,GAAQ,CAAA,EAAAA,EAAA,EAAA,CACtB,EAAA,IAAkB,EAAA,GAAQ,CAAA,EAAAF,EAAA,EAAA,CAC1B,IAAA,EAAYI,SAAAA,CAAAA,EAAAA,EAAAA,CACV,MAAA,IAAa,OAAA,IAAa,KAAA,OAAU,CAAA,EAAAF,EAAA,EAAA,CACpC,IAAA,EACOG,MAAAA,IACE,OAAA,GACC,KAAA,QACH,QAAA,GACI,UAAA,GALX,YAAA,AAAA,GAAA,OAQI,AAAA,EAAA,gBAAA,EAAA,SACET,GAAAA,OAAAA,WACAQ,KAAAA,UAAAA,QAAAA,UAAAA,GACAR,EAAAA,aAAAA,GACD,CACF,CAAA,CAAA,CAfL,CAAA,EAAAI,EAAA,EAAA,CAmBA,KAAA,SACO,aAAA,EAAA,OAAA,EACqB,WAAA,EAAA,OAAA,EACJ,YAAA,EAAA,OAAA,EACE,YAAA,EAAA,OAAA,EACA,UAAA,EAAA,OAAA,EACJ,WAAA,EAAA,OAAA,EACE,QAAA,EAAA,OAAA,EACN,SAAA,CAAAE,EAAA,EAAA,CAEhB,KAAA,OACO,OAAA,GACG,EAAA,IACL,EAAA,IACA,KAAA,MACE,UAAA,GALP,aAAA,EAAA,MAAA,EAO4B,WAAA,EAAA,MAAA,EACJ,YAAA,EAAA,MAAA,EACE,YAAA,EAAA,MAAA,EACA,UAAA,EAAA,MAAA,EACJ,WAAA,EAAA,MAAA,EACE,QAAA,EAAA,MAAA,CACN,CAAA,EAAAA,EAAA,EAAA,CAElB,KAAA,OACO,OAAA,GACG,EAAA,IACL,EAAA,IACA,KAAA,MACE,UAAA,GALP,aAAA,EAAA,MAAA,EAO4B,WAAA,EAAA,MAAA,EACJ,YAAA,EAAA,MAAA,EACE,YAAA,EAAA,MAAA,EACA,UAAA,EAAA,MAAA,EACJ,WAAA,EAAA,MAAA,EACE,QAAA,EAAA,MAAA,CACN,CAAA,CAAA,CAtCpB,CAAA,CAAA,CAhCF,CAAA,CAAA,CAAA,EAAAF,EAAA,MAAA,CA2EF,MAAA,CAAY,SAAEM,UAAAA,QAA2B,EAA7B,SAAA,CAAAJ,EAAA,KAAA,CACV,SAAA,MAAA,CAAA,EAAAA,EAAA,SAAA,CACA,QAAA,EAAiBK,SAAAA,WAAjB,CAAA,EAAA,EAAA,IAAA,CAAA,EAAA,IAAAL,EAAA,MAAA,CAEE,SAAA,CAAcM,EAAAA,CAAAA,CAAAA,CAAAA,CAJlB,CAAA,CAAA,CA7FF,CAAA,CAsGH;;;;;;;;;;;;;;;;;;;;;;;;;"}