{"version":3,"file":"math.bcc4451c.js","sources":["../../src/animation/useKonvaAnimation.ts","../../src/utils/math.ts"],"sourcesContent":["import Konva from \"konva\";\nimport { AnimationFn, IFrame } from \"konva/lib/types\";\nimport { useEffect } from \"react\";\n\nexport type AnimateFunc = (frame: IFrame) => boolean | void;\n\nexport type KonvaAnimationOptions = {\n  disabled?: boolean;\n  layer?: Konva.Layer;\n};\n\nexport function useKonvaAnimation(animate: AnimateFunc, options?: KonvaAnimationOptions) {\n  const disabled = options?.disabled;\n  const layer = options?.layer;\n\n  useEffect(() => {\n    if (disabled) return;\n\n    const animation = new Konva.Animation((frame) => {\n      if (!frame) return;\n      return animate(frame);\n    }, layer);\n\n    animation.start();\n\n    return () => {\n      animation.stop();\n    };\n  }, [animate, disabled, layer]);\n}\n","import { Vector2d } from \"konva/lib/types\";\n\n/**\n * Linear interpolation between two values\n */\nexport function lerp(a: number, b: number, t: number) {\n  return a + (b - a) * t;\n}\n\nexport function lerp2d(a: Vector2d, b: Vector2d, t: number) {\n  return {\n    x: lerp(a.x, b.x, t),\n    y: lerp(a.y, b.y, t),\n  };\n}\n\n/**\n * Clamps the value between [0, 1].\n */\nexport function clamp01(value: number) {\n  if (value < 0) return 0;\n  if (value > 1) return 1;\n  return value;\n}\n\n/**\n * Linear interpolation between two values, clamping the t input between [0, 1].\n */\nexport function lerp01(a: number, b: number, t: number) {\n  return a + (b - a) * clamp01(t);\n}\n\nexport function lerp2d01(a: Vector2d, b: Vector2d, t: number) {\n  return {\n    x: lerp01(a.x, b.x, t),\n    y: lerp01(a.y, b.y, t),\n  };\n}\n\n/**\n * Inverse linear interpolation of a value over a range.\n */\nexport function inverseLerp(val: number, a: number, b: number) {\n  return (val - a) / (b - a);\n}\n\n/**\n * Remaps a value from one range to another.\n * @param val The value to remap\n * @param a1 The start of the first range\n * @param b1 The end of the first range\n * @param a2 The start of the second range\n * @param b2 The end of the second range\n */\nexport function remap(val: number, a1: number, b1: number, a2: number, b2: number) {\n  return a2 + (b2 - a2) * ((val - a1) / (b1 - a1));\n}\n\n/**\n * Remaps a value from one range to another, clamping the intermediate t value to the\n * range [0, 1], ensuring that the result is within the second range.\n * @param val The value to remap\n * @param a1 The start of the first range\n * @param b1 The end of the first range\n * @param a2 The start of the second range\n * @param b2 The end of the second range\n */\nexport function remapClamped(val: number, a1: number, b1: number, a2: number, b2: number) {\n  return lerp01(a2, b2, (val - a1) / (b1 - a1));\n}\n"],"names":["useEffect"],"mappings":"yFAWO,WAA2B,EAAsB,EAAiC,CACvF,KAAM,GAAW,iBAAS,SACpB,EAAQ,iBAAS,MAEvBA,EAAAA,QAAAA,UAAU,IAAM,CACV,GAAA,EAAU,OAEd,KAAM,GAAY,GAAI,GAAM,UAAU,AAAC,GAAU,CAC/C,GAAI,EAAC,EACL,MAAO,GAAQ,CAAK,GACnB,CAAK,EAER,SAAU,MAAM,EAET,IAAM,CACX,EAAU,KAAK,CAAA,CAEhB,EAAA,CAAC,EAAS,EAAU,CAAK,CAAC,CAC/B,CCVO,WAAiB,EAAe,CACrC,MAAI,GAAQ,EAAU,EAClB,EAAQ,EAAU,EACf,CACT,CAKuB,WAAA,EAAW,EAAW,EAAW,CACtD,MAAO,GAAK,GAAI,GAAK,EAAQ,CAAC,CAChC,CAEyB,WAAA,EAAa,EAAa,EAAW,CACrD,MAAA,CACL,EAAG,EAAO,EAAE,EAAG,EAAE,EAAG,CAAC,EACrB,EAAG,EAAO,EAAE,EAAG,EAAE,EAAG,CAAC,CAAA,CAEzB,CA8BO,WAAsB,EAAa,EAAY,EAAY,EAAY,EAAY,CACxF,MAAO,GAAO,EAAI,EAAW,GAAA,MAAY,EAAG,CAC9C"}