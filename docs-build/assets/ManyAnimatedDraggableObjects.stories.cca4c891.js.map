{"version":3,"file":"ManyAnimatedDraggableObjects.stories.cca4c891.js","sources":["../../src/stress-tests/ManyAnimatedDraggableObjects.tsx"],"sourcesContent":["import Konva from \"konva\";\nimport { useRef } from \"react\";\nimport { Layer, Rect } from \"react-konva\";\nimport { useKonvaAnimation } from \"../animation/useKonvaAnimation\";\nimport { DraggableLayer } from \"../components/DraggableLayer\";\nimport { DraggableStage } from \"../components/DraggableStage/DraggableStage\";\nimport { FrameCounter } from \"../components/FrameCounter\";\n\nconst rand = (min: number, max: number) => Math.random() * max - min + min;\n\nfunction mapCreate<T>(n: number, factory: () => T): T[] {\n  const items: T[] = [];\n\n  for (let i = 0; i < n; i++) {\n    items.push(factory());\n  }\n\n  return items;\n}\n\ntype ItemProps = React.ComponentProps<typeof Rect> & {\n  //\n};\n\nfunction AnimatedItem(props: ItemProps) {\n  const ref = useRef<Konva.Rect>(null);\n\n  useKonvaAnimation((frame) => {\n    const rect = ref.current;\n    if (!rect) return;\n\n    const speed = 1.0;\n    rect.rotation(frame.time / (1 / (speed * 0.1)));\n  });\n\n  return <Rect ref={ref} {...props} stroke=\"black\" />;\n}\n\nconst getRandomItem = () =>\n  ({\n    x: rand(0, 500),\n    y: rand(0, 500),\n    fill: \"red\",\n    width: 50,\n    height: 50,\n    draggable: true,\n    offsetX: 25,\n    offsetY: 25,\n  } as ItemProps);\n\nexport type ManyAnimatedDraggableObjectsProps = {\n  count: number;\n};\n\nexport function ManyAnimatedDraggableObjects(props: ManyAnimatedDraggableObjectsProps) {\n  const { count } = props;\n\n  return (\n    <DraggableStage width={500} height={500} bgFill=\"gray\">\n      <DraggableLayer>\n        {mapCreate(count, getRandomItem).map((item, index) => (\n          <AnimatedItem {...item} key={index} />\n        ))}\n      </DraggableLayer>\n      <Layer>\n        <FrameCounter width={500} height={100} />\n      </Layer>\n    </DraggableStage>\n  );\n}\n"],"names":["items","useRef","useKonvaAnimation","rect","_jsx","props","count","_jsxs","_createElement","item","index"],"mappings":"mSAQA,KAAA,GAAA,CAAA,EAAA,IAAA,KAAA,SAAA,EAAA,EAAA,EAEA,WAAA,EAAA,EAAA,CACE,KAAA,GAAA,CAAA,EAEA,OAAA,GAAA,EAAA,EAAA,EAAA,IACEA,EAAAA,KAAAA,EAAAA,CAAAA,EAGF,MAAA,EACD,CAMD,WAAA,EAAA,CACE,KAAA,GAAAC,iBAAA,IAAA,EAEAC,SAAAA,AAAAA,GAAAA,CACE,KAAA,GAAA,EAAA,QACA,GAAA,CAAA,EAAW,OAEX,KAAA,GAAA,EACAC,EAAAA,SAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,CAAA,CAAA,EAGFC,EAAA,EAAA,CAAO,MAAM,GAAA,EAAcC,OAAAA,OAAc,CAAA,CAC1C,CAED,KAAA,GAAA,IAAA,EACG,EAAA,EAAA,EAAA,GAAA,EACQ,EAAA,EAAA,EAAA,GAAA,EACA,KAAA,MACD,MAAA,GACC,OAAA,GACC,UAAA,GACG,QAAA,GACF,QAAA,EAPV,GAeI,WAAA,EAAA,CACL,KAAA,CAAM,SAAEC,EAER,MAAAC,GAAA,EAAA,CACE,MAAA,IAAuB,OAAA,IAAa,OAAA,OAAY,SAAA,CAAAH,EAAA,EAAA,CAC9C,SAAA,EAAA,EAAA,CAAA,EAAA,IAAA,CAAA,EAAA,IAAAI,EAAA,QAAA,cAAA,EAAA,MAEsBC,IAAAA,CAAWC,CAAAA,CAAAA,CAD9B,CAAA,EAAAN,EAAA,EAAA,CAIH,SAAAA,EAAA,EAAA,CACE,MAAA,IAAqB,OAAA,GAAa,CAAA,CAAlC,CAAA,CAAA,CAPJ,CAAA,CAWH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}