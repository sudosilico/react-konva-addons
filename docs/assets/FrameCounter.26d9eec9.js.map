{"version":3,"file":"FrameCounter.26d9eec9.js","sources":["../../src/utils.ts","../../src/components/FrameCounter/FrameCounter.tsx"],"sourcesContent":["/**\n * Linear interpolation between two values\n */\nexport function lerp(a: number, b: number, t: number) {\n  return a + (b - a) * t;\n}\n\n/**\n * Clamps the value between [0, 1].\n */\nexport function clamp01(value: number) {\n  if (value < 0) return 0;\n  if (value > 1) return 1;\n  return value;\n}\n\n/**\n * Linear interpolation between two values, clamping the t input between [0, 1].\n */\nexport function lerp01(a: number, b: number, t: number) {\n  return a + (b - a) * clamp01(t);\n}\n\n/**\n * Inverse linear interpolation of a value over a range.\n */\nexport function inverseLerp(val: number, a: number, b: number) {\n  return (val - a) / (b - a);\n}\n\n/**\n * Remaps a value from one range to another.\n * @param val The value to remap\n * @param a1 The start of the first range\n * @param b1 The end of the first range\n * @param a2 The start of the second range\n * @param b2 The end of the second range\n */\nexport function remap(val: number, a1: number, b1: number, a2: number, b2: number) {\n  return a2 + (b2 - a2) * ((val - a1) / (b1 - a1));\n}\n\n/**\n * Remaps a value from one range to another, clamping the intermediate t value to the\n * range [0, 1], ensuring that the result is within the second range.\n * @param val The value to remap\n * @param a1 The start of the first range\n * @param b1 The end of the first range\n * @param a2 The start of the second range\n * @param b2 The end of the second range\n */\nexport function remapClamped(val: number, a1: number, b1: number, a2: number, b2: number) {\n  return lerp01(a2, b2, (val - a1) / (b1 - a1));\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PickField<T, K extends string> = T extends Record<K, any> ? T[K] : never;\n","import Konva from \"konva\";\nimport { useCallback, useRef } from \"react\";\nimport { Group, Line, Rect, Text } from \"react-konva\";\nimport { Frame, useKonvaAnimation } from \"../../animation/useKonvaAnimation\";\nimport { remapClamped } from \"../../utils\";\n\ntype FrameCounterPointsProps = {\n  width: number;\n  height: number;\n};\n\ntype FrameCounterRefState = {\n  times: number[];\n  points: number[];\n  maxValue: number;\n  fps: number;\n  fpsAccumulator: number;\n  frames: number;\n  fpsTextY: number;\n};\n\nconst fpsToMs = (fps: number) => 1000 / fps;\nconst msToFps = (ms: number) => 1000 / ms;\n\nconst frameTime144 = fpsToMs(144);\nconst frameTime60 = fpsToMs(60);\nconst frameTime30 = fpsToMs(30);\n\nfunction FrameCounterPoints(props: FrameCounterPointsProps) {\n  // refs\n  const lineRef = useRef<Konva.Line>(null);\n  const textRef30 = useRef<Konva.Text>(null);\n  const textRef60 = useRef<Konva.Text>(null);\n  const textRef144 = useRef<Konva.Text>(null);\n  const textRefFps = useRef<Konva.Text>(null);\n  const frameCounterRef = useRef<FrameCounterRefState>({\n    times: [],\n    points: [],\n    maxValue: 0,\n    fpsAccumulator: 0,\n    fps: 0,\n    frames: 0,\n    fpsTextY: 0,\n  });\n\n  const timeToY = useCallback(\n    (t: number) => remapClamped(msToFps(Math.max(t, 0.001)), 0, 200, props.height, 0),\n    [props.height],\n  );\n\n  // logic\n  const animate = useCallback(\n    (frame: Frame) => {\n      const state = frameCounterRef.current;\n      const line = lineRef.current;\n      const text30 = textRef30.current;\n      const text60 = textRef60.current;\n      const text144 = textRef144.current;\n      const fpsText = textRefFps.current;\n\n      if (!state || !line || !text30 || !text60 || !text144 || !fpsText) return;\n\n      const deltaTime = Math.min(frame.timeDiff, fpsToMs(1));\n\n      if (frame.timeDiff > state.maxValue) {\n        state.maxValue = deltaTime;\n      }\n\n      // make sure state.times has enough elements\n      while (state.times.length < props.width - 50) {\n        state.times.push(0);\n      }\n\n      for (let i = 1; i < state.times.length; i++) {\n        state.times[i - 1] = state.times[i];\n      }\n\n      state.times[state.times.length - 1] = deltaTime;\n\n      // recycle points array\n      state.points.length = 0;\n\n      for (let i = 0; i < state.times.length; i++) {\n        state.points.push(i);\n        state.points.push(timeToY(state.times[i]));\n      }\n\n      line.points(state.points);\n\n      // fps text label\n      state.frames++;\n      const frequency = 500;\n\n      state.fpsAccumulator += deltaTime;\n      if (state.fpsAccumulator > frequency) {\n        state.fpsAccumulator -= frequency;\n        state.fps = state.frames;\n        state.frames = 0;\n\n        const frameCountToFPS = state.fps * (1000 / frequency);\n\n        fpsText.text(`- ${frameCountToFPS} fps`);\n        fpsText.y(timeToY(deltaTime) - 5);\n      }\n\n      text30.y(-5);\n      text60.y(timeToY(frameTime60) - 5);\n      text144.y(timeToY(frameTime144) - 5);\n    },\n    [props.width, timeToY],\n  );\n\n  useKonvaAnimation(animate);\n\n  return (\n    <>\n      <Line ref={lineRef} stroke=\"black\" strokeWidth={1} />\n      <Rect width={50} height={props.height} fill=\"white\" opacity={0.7} />\n      <Rect width={2} height={props.height} x={50} fill=\"black\" opacity={0.5} />\n      <Text ref={textRef30} y={timeToY(frameTime30)} text=\"30 fps -\" x={10} />\n      <Text ref={textRef60} y={timeToY(frameTime60)} text=\"60 fps -\" x={10} />\n      <Text ref={textRef144} y={timeToY(frameTime144)} text=\"144 fps -\" x={3} />\n      <Rect x={props.width - 50} width={50} height={props.height} fill=\"white\" opacity={1.0} />\n      <Rect width={2} height={props.height} x={props.width - 52} fill=\"black\" opacity={0.5} />\n      <Text ref={textRefFps} text=\"0 fps\" x={props.width - (50 - 3)} y={2} />\n    </>\n  );\n}\n\nexport type FrameCounterProps = {\n  x?: number;\n  y?: number;\n  opacity?: number;\n  width: number;\n  height: number;\n};\n\nconst defaultFrameCounterProps = {};\n\nexport function FrameCounter(props: FrameCounterProps) {\n  const { x, y, width, height } = { ...defaultFrameCounterProps, ...props };\n\n  return (\n    <Group\n      x={x}\n      y={y}\n      opacity={0.5}\n      listening={false}\n      clipHeight={height}\n      clipWidth={width}\n      clipX={0}\n      clipY={0}\n    >\n      <Rect width={width} height={height} fill=\"white\" />\n      <FrameCounterPoints width={width} height={height} />\n    </Group>\n  );\n}\n"],"names":["useRef","useCallback","state","line","fpsText","text30","text60","text144","useKonvaAnimation","_jsxs","_Fragment","_jsx","lineRef","height","textRef30","textRef60","textRef144","textRefFps","x","y","width","defaultFrameCounterProps","props"],"mappings":"8NAUO,WAAiB,EAAe,CACrC,MAAI,GAAQ,EAAU,EAClB,EAAQ,EAAU,EACf,CACT,CAKuB,WAAA,EAAW,EAAW,EAAW,CACtD,MAAO,GAAK,GAAI,GAAK,EAAQ,CAAC,CAChC,CA8BO,WAAsB,EAAa,EAAY,EAAY,EAAY,EAAY,CACxF,MAAO,GAAO,EAAI,EAAW,GAAA,MAAY,EAAG,CAC9C,CChCA,KAAA,GAAA,AAAA,GAAA,IAAA,EACA,EAAA,AAAA,GAAA,IAAA,EAEA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAEA,WAAA,EAAA,CAEE,KAAA,GAAAA,iBAAA,IAAA,EACA,EAAAA,iBAAA,IAAA,EACA,EAAAA,iBAAA,IAAA,EACA,EAAAA,iBAAA,IAAA,EACA,EAAAA,iBAAA,IAAA,EACA,EAAAA,EAAAA,QAAAA,OAAA,CAAqD,MAAA,CAAA,EAAA,OAAA,CAAA,EAAA,SAAA,EAGzC,eAAA,EACM,IAAA,EACX,OAAA,EACG,SAAA,CACE,CAAA,EAGZ,EAAAC,EAAA,QAAA,YAAA,AAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,IAAA,EAAA,OAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAMA,EAAAA,sBAAA,AAAA,GAAA,CAEI,KAAA,GAAA,EAAA,QACA,EAAA,EAAA,QACA,EAAA,EAAA,QACA,EAAA,EAAA,QACA,EAAA,EAAA,QACA,EAAA,EAAA,QAEA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAmE,OAEnE,KAAA,GAAA,KAAA,IAAA,EAAA,SAAA,EAAA,CAAA,CAAA,EAOA,IALA,EAAA,SAAA,EAAA,UACEC,GAAAA,SAAAA,GAIF,EAAA,MAAA,OAAA,EAAA,MAAA,IACEA,EAAAA,MAAAA,KAAAA,CAAAA,EAGF,OAAA,GAAA,EAAA,EAAA,EAAA,MAAA,OAAA,IACEA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAGFA,EAAAA,MAAAA,EAAAA,MAAAA,OAAAA,GAAAA,EAGAA,EAAAA,OAAAA,OAAAA,EAEA,OAAA,GAAA,EAAA,EAAA,EAAA,MAAA,OAAA,IACEA,EAAAA,OAAAA,KAAAA,CAAAA,EACAA,EAAAA,OAAAA,KAAAA,EAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAGFC,EAAAA,OAAAA,EAAAA,MAAAA,EAGAD,EAAAA,SACA,KAAA,GAAA,IAGA,GADAA,EAAAA,gBAAAA,EACA,EAAA,eAAA,EAAA,CACEA,EAAAA,gBAAAA,EACAA,EAAAA,IAAAA,EAAAA,OACAA,EAAAA,OAAAA,EAEA,KAAA,GAAA,EAAA,IAAA,KAAA,GAEAE,EAAAA,KAAAA,KAAAA,OAAAA,EACAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAA,CAGFC,EAAAA,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EACAC,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,CAAA,EAKJC,SAAAA,CAAAA,EAEAC,EAAAC,EAAA,CACE,SAAA,CAAAC,EAAA,EAAA,CACE,IAAA,EAAWC,OAAAA,QAAgB,YAAA,CAAqB,CAAA,EAAAD,EAAA,EAAA,CAChD,MAAA,GAAa,OAAA,EAAA,OAAkBE,KAAAA,QAAa,QAAA,EAAiB,CAAA,EAAAF,EAAA,EAAA,CAC7D,MAAA,EAAa,OAAA,EAAA,OAAiBE,EAAAA,GAAW,KAAA,QAAS,QAAA,EAAiB,CAAA,EAAAF,EAAA,EAAA,CACnE,IAAA,EAAWG,EAAAA,EAAAA,CAAAA,EAAqB,KAAA,WAAoB,EAAA,EAAc,CAAA,EAAAH,EAAA,EAAA,CAClE,IAAA,EAAWI,EAAAA,EAAAA,CAAAA,EAAqB,KAAA,WAAoB,EAAA,EAAc,CAAA,EAAAJ,EAAA,EAAA,CAClE,IAAA,EAAWK,EAAAA,EAAAA,CAAAA,EAAsB,KAAA,YAAqB,EAAA,CAAe,CAAA,EAAAL,EAAA,EAAA,CACrE,EAAA,EAAA,MAAA,GAAuB,MAAA,GAAW,OAAA,EAAA,OAAkBE,KAAAA,QAAa,QAAA,CAAiB,CAAA,EAAAF,EAAA,EAAA,CAClF,MAAA,EAAa,OAAA,EAAA,OAAiBE,EAAAA,EAAAA,MAAAA,GAAyB,KAAA,QAAS,QAAA,EAAiB,CAAA,EAAAF,EAAA,EAAA,CACjF,IAAA,EAAWM,KAAAA,QAAiB,EAAA,EAAA,MAAA,IAAA,GAA+B,EAAA,CAAO,CAAA,CAAA,CATpE,CAAA,CAYH,CAUD,KAAA,GAAA,CAAA,EAEO,WAAA,EAAA,CACL,KAAA,CAAM,IAAEC,IAAGC,QAAGC,UAAOP,CAAW,GAAA,EAAKQ,GAAAA,CAA6BC,EAElE,MAAAb,GAAA,EAAA,CACE,IACE,IACA,QAAA,GACS,UAAA,GACE,WAAA,EACCI,UAAAA,EACDO,MAAAA,EACJ,MAAA,EACA,SAAA,CAAAT,EAAA,EAAA,CAEP,QAAM,SAAc,KAAA,OAAqB,CAAA,EAAAA,EAAA,EAAA,CACzC,QAAoB,QAAc,CAAA,CAAA,CAXpC,CAAA,CAcH"}