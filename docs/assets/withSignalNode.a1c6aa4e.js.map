{"version":3,"file":"withSignalNode.a1c6aa4e.js","sources":["../../src/signals/withSignalNode.tsx"],"sourcesContent":["import Konva from \"konva\";\nimport { NodeConfig } from \"konva/lib/Node\";\nimport { ClassAttributes, forwardRef, RefObject, useEffect, useLayoutEffect, useRef } from \"react\";\nimport { KonvaNodeComponent, KonvaNodeEvents } from \"react-konva\";\nimport { Signal } from \"./useSignal\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype UnionToParm<U> = U extends any ? (k: U) => void : never;\ntype UnionToSect<U> = UnionToParm<U> extends (k: infer I) => void ? I : never;\ntype ExtractParm<F> = F extends { (a: infer A): void } ? A : never;\n\ntype RemoveLastUnionElement<Union> = Exclude<Union, GetLastUnionElement<Union>>;\ntype GetLastUnionElement<Union> = ExtractParm<UnionToSect<UnionToParm<Union>>>;\n\ntype ToSignalUnion<Union> = ToSignalUnionRec<Union, Union>;\ntype ToSignalUnionRec<Union, Rslt> = RemoveLastUnionElement<Union> extends never\n  ? Signal<GetLastUnionElement<Union>> | Rslt\n  : ToSignalUnionRec<RemoveLastUnionElement<Union>, Signal<GetLastUnionElement<Union>>>;\n\ntype SignalMap<N extends Konva.Node, C extends NodeConfig> = {\n  [K in keyof C]: K extends string ? ToSignalUnion<C[K]> : never;\n};\n\ntype AddonProps<N extends Konva.Node, C extends NodeConfig> = {\n  $?: SignalMap<N, C>;\n};\n\ntype WrappedProps<N extends Konva.Node, C extends NodeConfig> = C &\n  ClassAttributes<N> &\n  KonvaNodeEvents &\n  AddonProps<N, C>;\n\ntype ComponentWithSignals<N extends Konva.Node, C extends NodeConfig> = (\n  props: WrappedProps<N, C>,\n) => JSX.Element;\n\ntype ListenerMap<N extends Konva.Node, C extends NodeConfig> = {\n  [id: string]: number[];\n};\n\ntype SignalsById<C extends NodeConfig> = {\n  [id: string]: Signal<keyof C[Extract<keyof C, string>]>;\n};\n\nexport function withSignalNode<N extends Konva.Node, C extends NodeConfig>(\n  Component: KonvaNodeComponent<N, C>,\n): ComponentWithSignals<N, C> {\n  function useInternalRef<S>(ref: RefObject<N>, signals: S) {\n    const internalRef = useRef<N>(null);\n\n    if (!ref && signals) {\n      return internalRef;\n    }\n\n    return ref;\n  }\n\n  const ComponentWithSignals = (props: WrappedProps<N, C>, forwardedRef: RefObject<N>) => {\n    const signals = props.$;\n\n    const ref = useInternalRef(forwardedRef, signals);\n\n    useEffect(() => {\n      if (!ref) {\n        return;\n      }\n\n      const addedListenersMap: ListenerMap<N, C> = {};\n      const signalsById: SignalsById<C> = {};\n\n      if (signals) {\n        for (const key in signals) {\n          if (typeof key === \"string\") {\n            const keyStr = key as keyof N;\n            type SignalType = keyof C[Extract<keyof C, string>];\n\n            const signal = signals[key] as Signal<SignalType>;\n\n            function listener(value: SignalType) {\n              if (ref.current) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore :(\n                ref.current[keyStr](value);\n              }\n            }\n\n            const listenerId = signal.addListener(listener);\n\n            listener(signal.get());\n\n            const listeners = addedListenersMap[signal.id()];\n\n            if (!listeners) {\n              addedListenersMap[signal.id()] = [listenerId];\n              signalsById[signal.id()] = signal;\n            } else {\n              listeners.push(listenerId);\n            }\n          }\n        }\n      }\n\n      return () => {\n        const signalIds = Object.keys(signalsById);\n\n        for (let i = 0; i < signalIds.length; i++) {\n          const signal = signalsById[signalIds[i]];\n          const listeners = addedListenersMap[signal.id()];\n\n          for (let j = 0; j < listeners.length; j++) {\n            signal.removeListenerAt(listeners[j]);\n          }\n        }\n      };\n    }, [ref, signals]);\n\n    return <Component ref={ref} {...props} />;\n  };\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return forwardRef(ComponentWithSignals) as ComponentWithSignals<N, C>;\n}\n"],"names":["useRef","ref","useEffect","listener","listeners","addedListenersMap","signalsById","signal","_jsx","props","forwardRef"],"mappings":"sFA4CO,WAAA,EAAA,CAGL,WAAA,EAAA,EAAA,CACE,KAAA,GAAAA,iBAAA,IAAA,EAEA,MAAA,CAAA,GAAA,EACE,EAGF,CAAOC,CAGT,KAAA,GAAA,CAAA,EAAA,IAAA,CACE,KAAA,GAAA,EAAA,EAEA,EAAA,EAAA,EAAA,CAAA,EAEAC,SAAAA,QAAAA,UAAAA,IAAAA,CACE,GAAA,CAAA,EACE,OAGF,KAAA,GAAA,CAAA,EACA,EAAA,CAAA,EAEA,GAAA,GACE,SAAA,KAAA,GACE,GAAA,MAAA,IAAA,SAAA,CAME,GAAA,GAAA,SAAA,EAAA,CACE,AAAA,EAAA,SAGED,EAAAA,QAAAA,GAAAA,CAAAA,CACD,EAVH,KAAA,GAAA,EAGA,EAAA,EAAA,GAUA,EAAA,EAAA,YAAA,CAAA,EAEAE,EAAAA,EAAAA,IAAAA,CAAAA,EAEA,KAAA,GAAA,EAAA,EAAA,GAAA,GAEA,AAAA,EAIEC,EAAAA,KAAAA,CAAAA,EAHAC,GAAAA,EAAAA,GAAAA,GAAAA,CAAAA,CAAAA,EACAC,EAAAA,EAAAA,GAAAA,GAAAA,EAGD,EAKP,MAAA,IAAA,CACE,KAAA,GAAA,OAAA,KAAA,CAAA,EAEA,OAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACE,KAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,GAEA,OAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IACEC,EAAAA,iBAAAA,EAAAA,EAAAA,CACD,CACF,CACF,EAAA,CAAA,EAAA,CAAA,CAAA,EAGHC,EAAA,EAAA,CAAO,MAAW,GAAA,CAAcC,CAAAA,CAAhC,EAKF,MAAAC,GAAAA,QAAAA,WAAA,CAAA,CACD"}