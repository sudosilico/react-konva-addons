{"version":3,"file":"SineExample.stories.0fb82f6c.js","sources":["../../src/stress-tests/SineExample.tsx"],"sourcesContent":["import Konva from \"konva\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  Circle as ReactKonvaCircle,\n  Line as ReactKonvaLine,\n  Rect as ReactKonvaRect,\n} from \"react-konva\";\nimport { useKonvaAnimation } from \"../animation/useKonvaAnimation\";\nimport { DraggableLayer } from \"../components/DraggableLayer\";\nimport { DraggableStage } from \"../components/DraggableStage/DraggableStage\";\nimport { withSignalNode } from \"../signals/withSignalNode\";\n\nconst Rect = withSignalNode(ReactKonvaRect);\nconst Line = withSignalNode(ReactKonvaRect);\nconst Circle = withSignalNode(ReactKonvaCircle);\n\nexport type SineExampleProps = {\n  //\n};\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nconst getInitialPoints = (count: number) => {\n  const points = [];\n\n  for (let i = 0; i < count; i++) {\n    points.push({\n      x: i * 10,\n      y: 100,\n    });\n  }\n\n  return points;\n};\n\nexport function SineExample(props: SineExampleProps) {\n  const itemsRef = useRef<Array<Konva.Circle | null>>([]);\n  const initialPoints = useMemo(() => getInitialPoints(10), []);\n  const [points, setPoints] = useState<Point[]>(initialPoints);\n\n  const count = 100;\n\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, count);\n  }, [count]);\n\n  useKonvaAnimation((frame) => {\n    const newPoints = [...points];\n\n    for (let i = 0; i < newPoints.length; i++) {\n      const { x, y } = newPoints[i];\n      newPoints[i].y = Math.sin((frame.time / 1000) * 40 + newPoints[i].x) * 100 + 100;\n    }\n  });\n\n  return (\n    <DraggableStage width={500} height={500} bgFill=\"#323232\">\n      <DraggableLayer>\n        {points.map((point, index) => (\n          <Circle\n            ref={(el) => {\n              itemsRef.current[index] = el;\n            }}\n            {...point}\n            key={index}\n            radius={7}\n            fill=\"#cdcdcd\"\n          />\n        ))}\n      </DraggableLayer>\n    </DraggableStage>\n  );\n}\n"],"names":["ReactKonvaRect","ReactKonvaCircle","points","useRef","useMemo","useState","useEffect","itemsRef","useKonvaAnimation","newPoints","_jsx","_createElement","el","point","index"],"mappings":"2SAYA,EAAAA,CAAA,EACA,EAAAA,CAAA,EACA,KAAA,GAAA,EAAAC,CAAA,EAWA,EAAA,AAAA,GAAA,CACE,KAAA,GAAA,CAAA,EAEA,OAAA,GAAA,EAAA,EAAA,EAAA,IACEC,EAAAA,KAAAA,CAAY,EAAA,EAAA,GACH,EAAA,GACJ,CAAA,EAIP,MAAA,EACD,EAEM,WAAA,EAAA,CACL,KAAA,GAAAC,iBAAA,CAAA,CAAA,EACA,EAAAC,EAAAA,QAAAA,QAAA,IAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EACA,CAAA,EAAA,GAAAC,EAAA,QAAA,SAAA,CAAA,EAEA,EAAA,IAEAC,SAAAA,QAAAA,UAAAA,IAAAA,CACEC,EAAAA,QAAAA,EAAAA,QAAAA,MAAAA,EAAAA,CAAAA,CAAmB,EAAA,CAAA,CAAA,CAAA,EAGrBC,EAAAA,AAAAA,GAAAA,CACE,KAAA,GAAA,CAAA,GAAA,CAAA,EAEA,OAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAEEC,EAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,EAAAA,GAAAA,CAAAA,EAAAA,IAAAA,GACD,CAAA,EAGHC,EAAA,EAAA,CACE,MAAA,IAAuB,OAAA,IAAa,OAAA,UAAY,SAAAA,EAAA,EAAA,CAC9C,SAAA,EAAA,IAAA,CAAA,EAAA,IAAAC,EAAA,QAAA,cAAA,EAAA,CAEI,IAAA,AAAA,GAAA,CAEIJ,EAAAA,QAAAA,GAAAA,CAA0BK,EAC3B,GAAA,EACGC,IAAAA,EACCC,OAAAA,EACG,KAAA,SACH,CAAA,CAAA,CARR,CAAA,CADH,CAAA,CAeL;;;;;;;;;;;;;;;;;;;;;;;;"}