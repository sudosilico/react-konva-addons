{"version":3,"file":"WithAddonExample.stories.53ef2f59.js","sources":["../../src/signals/useSignal.ts","../../src/nodes/TestStuff2.tsx","../../src/nodes/WithAddonExample.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\n\ntype SignalListener<T> = ((value: T) => void) | null;\n\nexport interface Signal<T> {\n  get: () => T;\n  set: (value: T) => void;\n  setQuietly: (value: T) => void;\n  addListener: (listener: (value: T) => void) => number;\n  removeListenerAt: (index: number) => void;\n  id: () => number;\n}\n\nexport interface SignalRef<T> {\n  value: T;\n  listeners: SignalListener<T>[];\n  signal?: Signal<T>;\n  id: number;\n}\n\nfunction CreateSignal<T>(ref: React.MutableRefObject<SignalRef<T>>) {\n  return {\n    get: () => ref.current.value,\n    set: (value: T) => {\n      ref.current.value = value;\n      const listeners = ref.current.listeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        const listener = listeners[i];\n        if (listener != null) {\n          listener(value);\n        }\n      }\n    },\n    setQuietly: (value: T) => {\n      ref.current.value = value;\n    },\n    listeners: [],\n    addListener: (listener: (value: T) => void) => {\n      const listeners = ref.current.listeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listeners[i] === null) {\n          listeners[i] = listener;\n          return i;\n        }\n      }\n\n      listeners.push(listener);\n      return listeners.length - 1;\n    },\n    removeListenerAt: (index: number) => {\n      ref.current.listeners[index] = null;\n    },\n    id: () => {\n      return ref.current.id;\n    },\n  };\n}\n\nlet currentSignal = 0;\n\nfunction getSignalId() {\n  return currentSignal++;\n}\n\nexport function useSignal<T>(initial: T): Signal<T> {\n  const ref = useRef<SignalRef<T>>({\n    value: initial,\n    listeners: [],\n    id: -1,\n  });\n\n  if (ref.current.id === -1) {\n    ref.current.id = getSignalId();\n  }\n\n  const [signal] = useState(() => CreateSignal(ref));\n  ref.current.signal = signal;\n\n  return signal;\n}\n\nexport function useDerivedSignal<T>(signal: Signal<T>, derive: (value: T) => T): Signal<T> {\n  const ref = useRef<SignalRef<T>>({\n    value: derive(signal.get()),\n    listeners: [],\n    id: -1,\n  });\n\n  if (ref.current.id === -1) {\n    ref.current.id = getSignalId();\n  }\n\n  const [derivedSignal] = useState(() => CreateSignal(ref));\n  ref.current.signal = derivedSignal;\n\n  const listener = (value: T) => {\n    ref.current.value = derive(value);\n  };\n\n  signal.addListener(listener);\n  derivedSignal.addListener(listener);\n\n  return derivedSignal;\n}\n","import { KonvaEventObject } from \"konva/lib/Node\";\nimport { Layer, Rect as ReactKonvaRect, Stage } from \"react-konva\";\nimport { useSignal } from \"../signals/useSignal\";\nimport { withSignalNode } from \"../signals/withSignalNode\";\n\nconst Rect$ = withSignalNode(ReactKonvaRect);\n\nexport function MyTestStuffContainer2() {\n  const $rectWidth = useSignal<number>(300);\n\n  return (\n    <Stage width={500} height={500}>\n      <Layer>\n        <Rect$ width={500} height={500} fill=\"gray\" />\n        <Rect$\n          height={200}\n          fill=\"cyan\"\n          $={{\n            width: $rectWidth,\n          }}\n        />\n        <Rect$\n          y={200}\n          height={200}\n          fill=\"green\"\n          $={{\n            width: $rectWidth,\n          }}\n        />\n        <Rect$\n          width={30}\n          height={400}\n          fill=\"blue\"\n          draggable\n          // $in prop can take in a Signal<T> for konva props\n          $={{\n            x: $rectWidth,\n          }}\n          $drag={{\n            set: {\n              x: $rectWidth,\n            },\n          }}\n          onDragMove={(e: KonvaEventObject<DragEvent>) => {\n            $rectWidth.set(e.target.x());\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n}\n","import { useState } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { DraggableLayer } from \"../components/DraggableLayer\";\nimport { DraggableStage } from \"../components/DraggableStage/DraggableStage\";\nimport { withSignalNode } from \"../signals/withSignalNode\";\n\nconst StaticRect = () => {\n  return <Rect width={50} height={50} x={50} y={50} fill=\"white\" />;\n};\n\nconst DraggableRect = () => {\n  return <Rect width={50} height={50} x={150} y={50} fill=\"green\" draggable />;\n};\n\n/**\n * This is a docstring for MyExample.\n */\nexport function MyExample() {\n  const size = { width: 400, height: 400 };\n  const [cursor, setCursor] = useState(25);\n  const [items, setItems] = useState([\n    {\n      x: 20,\n      y: 0,\n      width: 50,\n      height: 50,\n      fill: \"white\",\n      draggable: true,\n    },\n  ]);\n\n  const onClick = () => {\n    setItems([\n      ...items,\n      {\n        x: 20,\n        y: cursor,\n        width: 50,\n        height: 50,\n        fill: \"white\",\n        draggable: true,\n      },\n    ]);\n\n    setCursor(cursor + 25);\n  };\n\n  return (\n    <>\n      <button onClick={onClick}>Click Me</button>\n      <DraggableStage {...size} bgFill=\"black\">\n        <DraggableLayer>\n          <StaticRect />\n          <DraggableRect />\n          {items.map((item, index) => (\n            <Rect {...item} key={index} />\n          ))}\n        </DraggableLayer>\n      </DraggableStage>\n    </>\n  );\n}\n"],"names":["useRef","useState","Rect$","withSignalNode","ReactKonvaRect","$rectWidth","useSignal","_jsx","width","x","set","e","target","_jsxs","_Fragment","setItems","cursor","setCursor","size","_createElement","item","index"],"mappings":"4QAoBA,WAAyB,EAA2C,CAC3D,MAAA,CACL,IAAK,IAAM,EAAI,QAAQ,MACvB,IAAK,AAAC,GAAa,CACjB,EAAI,QAAQ,MAAQ,EACd,KAAA,GAAY,EAAI,QAAQ,UAE9B,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,IAAK,CACzC,KAAM,GAAW,EAAU,GAC3B,AAAI,GAAY,MACd,EAAS,CAAK,CAElB,CACF,EACA,WAAY,AAAC,GAAa,CACxB,EAAI,QAAQ,MAAQ,CACtB,EACA,UAAW,CAAC,EACZ,YAAa,AAAC,GAAiC,CACvC,KAAA,GAAY,EAAI,QAAQ,UAE9B,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,IAChC,GAAA,EAAU,KAAO,KACnB,SAAU,GAAK,EACR,EAIX,SAAU,KAAK,CAAQ,EAChB,EAAU,OAAS,CAC5B,EACA,iBAAkB,AAAC,GAAkB,CAC/B,EAAA,QAAQ,UAAU,GAAS,IACjC,EACA,GAAI,IACK,EAAI,QAAQ,EACrB,CAEJ,CAEA,GAAI,GAAgB,EAEpB,YAAuB,CACd,MAAA,IACT,CAEO,WAAsB,EAAuB,CAClD,KAAM,GAAMA,EAAAA,QAAAA,OAAqB,CAC/B,MAAO,EACP,UAAW,CAAC,EACZ,GAAI,EAAA,CACL,EAEG,AAAA,EAAI,QAAQ,KAAO,IACjB,GAAA,QAAQ,GAAK,KAGnB,KAAM,CAAC,GAAUC,EAAAA,QAAAA,SAAS,IAAM,EAAa,CAAG,CAAC,EACjD,SAAI,QAAQ,OAAS,EAEd,CACT,CC5EA,KAAMC,GAAQC,EAAeC,CAAD,EAEY,YAAA,CAChCC,KAAAA,GAAaC,EAAkB,GAAT,EAE5B,SACG,EAAD,CAAO,MAAO,IAAK,OAAQ,IAA3B,WACG,EAAD,CAAA,SAAA,CACEC,EAAC,EAAD,CAAO,MAAO,IAAK,OAAQ,IAAK,KAAK,MAAA,CADvC,EAEEA,EAAC,EAAD,CACE,OAAQ,IACR,KAAK,OACL,EAAG,CACDC,MAAOH,CADN,CAAA,CALP,EASEE,EAAC,EAAD,CACE,EAAG,IACH,OAAQ,IACR,KAAK,QACL,EAAG,CACDC,MAAOH,CADN,CAAA,CAbP,EAiBEE,EAAC,EAAD,CACE,MAAO,GACP,OAAQ,IACR,KAAK,OACL,aAEA,EAAG,CACDE,EAAGJ,CADF,EAGH,MAAO,CACLK,IAAK,CACHD,EAAGJ,CADA,CADA,EAKP,WAAY,AAACM,GAAmC,CAC9CN,EAAWK,IAAIC,EAAEC,OAAOH,EAAxB,CAAA,CACD,CAAA,CAjCL,CAAA,CAAA,CAAA,CAAA,CAFJ,CAwCD,CC5CD,KAAA,GAAA,IACEF,EAAA,EAAA,CAAO,MAAA,GAAa,OAAA,GAAY,EAAA,GAAO,EAAA,GAAO,KAAA,OAAS,CAAA,EAGzD,EAAA,IACEA,EAAA,EAAA,CAAO,MAAA,GAAa,OAAA,GAAY,EAAA,IAAO,EAAA,GAAQ,KAAA,QAAS,UAAA,EAAiB,CAAA,EAMpE,YAAA,CACL,KAAA,GAAA,CAAa,MAAA,IAAS,OAAA,GAAa,EACnC,CAAA,EAAA,GAAAN,EAAA,QAAA,SAAA,EAAA,EACA,CAAA,EAAA,GAAAA,EAAA,QAAA,SAAA,CAAA,CACE,EAAA,GACK,EAAA,EACA,MAAA,GACI,OAAA,GACC,KAAA,QACF,UAAA,EACK,CAAA,CAAA,EAoBf,MAAAY,GAAAC,EAAA,CACE,SAAA,CAAAP,EAAA,SAAA,CACE,QAlBJ,IAAA,CACEQ,EAAAA,CAAAA,GAAAA,EAAAA,CAEE,EAAA,GACK,EAAA,EACAC,MAAAA,GACI,OAAA,GACC,KAAA,QACF,UAAA,EACK,CAAA,CAAA,EAIfC,EAAAA,EAAAA,EAAAA,CAAS,EAKC,SAAA,UAAR,CAAA,EAAAV,EAAA,EAAA,CACA,GAAA,EAAoBW,OAAAA,QAAa,SAAAL,EAAA,EAAA,CAC/B,SAAA,CAAAN,EAAA,EAAA,CAAA,CAAA,EAAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,IAAA,CAAA,EAAA,IAAAY,EAAA,QAAA,cAAA,EAAA,MAIcC,IAAAA,CAAWC,CAAAA,CAAAA,CAAAA,CAJzB,CAAA,CAAA,CAAA,CAAA,CAHJ,CAAA,CAaH;;;;;;;;;;;;;;;;;;;;;;;;;;"}